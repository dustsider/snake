import pygame
import time
import random

# Initialize Pygame
pygame.init()

# Define colors
snake_color = (216, 239, 211)  # #D8EFD3
food_color = (250, 112, 112)  # #FA7070
background_color = (69, 71, 75)  # #45474B
white = (255, 255, 255)  # #ffffff
black = (0, 0, 0)  # #000000

# Screen dimensions
dis_width, dis_height = 800, 600

# Display
dis = pygame.display.set_mode((dis_width, dis_height))
pygame.display.set_caption("Snake")

# Set clock and snake properties
clock = pygame.time.Clock()
snake_block, snake_speed = 20, 15

# Fonts
font_style = pygame.font.SysFont(None, 50)
score_font = pygame.font.SysFont(None, 35)

# High score tracking
high_score = 0

def display_score(score):
    # Render and display current score
    value = score_font.render(f"Score: {score}", True, white)
    dis.blit(value, [0, 0])

def display_high_score(high_score):
    # Render and display high score
    value = score_font.render(f"High Score: {high_score}", True, white)
    dis.blit(value, [dis_width - 200, 0])

def snake(snake_block, snake_list):
    # Draw each part of the snake with smooth edges
    for x in snake_list:
        pygame.draw.rect(dis, snake_color, [x[0], x[1], snake_block, snake_block], border_radius=4)

def message(msg, color):
    # Display a message in the center of the screen
    mesg = font_style.render(msg, True, color)
    dis.blit(mesg, [dis_width/6, dis_height/3])

def game_over_animation():
    # Simple game over animation with flashing screen
    for _ in range(5):
        dis.fill(food_color)
        pygame.display.update()
        time.sleep(0.1)
        dis.fill(background_color)
        pygame.display.update()
        time.sleep(0.1)

def start_screen():
    # Display start screen with option to quit
    while True:
        dis.fill(background_color)
        message("Press C to Start or Q to Quit", white)
        pygame.display.update()
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    return
                if event.key == pygame.K_q:
                    pygame.quit()
                    quit()

def gameLoop():
    global high_score

    while True:
        # Initial snake and food positions
        x1, y1 = dis_width / 2, dis_height / 2
        x1_change, y1_change = 0, 0
        
        snake_list = []
        length_of_snake = 1
        
        foodx = round(random.randrange(0, dis_width - snake_block) / 20.0) * 20.0
        foody = round(random.randrange(0, dis_height - snake_block) / 20.0) * 20.0
        
        score = 0
        paused = False
        game_over = False
        
        while not game_over:
            while paused:
                message("Paused. Press P to resume game", white)
                pygame.display.update()
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        quit()
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_p:
                            paused = False
                            
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                if event.type == pygame.KEYDOWN:
                    # Snake controls
                    if event.key == pygame.K_LEFT and x1_change == 0:
                        x1_change = -snake_block
                        y1_change = 0
                    elif event.key == pygame.K_RIGHT and x1_change == 0:
                        x1_change = snake_block
                        y1_change = 0
                    elif event.key == pygame.K_UP and y1_change == 0:
                        x1_change = 0
                        y1_change = -snake_block
                    elif event.key == pygame.K_DOWN and y1_change == 0:
                        x1_change = 0
                        y1_change = snake_block
                    elif event.key == pygame.K_p:
                        paused = True
                        
            if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:
                # Collision check
                game_over_animation()
                game_over = True
                
            x1 += x1_change
            y1 += y1_change
            dis.fill(background_color)
            pygame.draw.rect(dis, food_color, [foodx, foody, snake_block, snake_block], 
                             border_radius=4)
            
            snake_head = [x1, y1]
            snake_list.append(snake_head)
            if len(snake_list) > length_of_snake:
                del snake_list[0]
            
            for x in snake_list[:-1]:
                if x == snake_head:
                    # Check for self-collision
                    game_over_animation()
                    game_over = True
                    
            snake(snake_block, snake_list)
            display_score(score)
            display_high_score(high_score)
            
            pygame.display.update()
            
            if x1 == foodx and y1 == foody:
                # Check if snake has eaten the food
                foodx = round(random.randrange(0, dis_width - snake_block) / 20.0) * 20.0
                foody = round(random.randrange(0, dis_height - snake_block) / 20.0) * 20.0
                length_of_snake += 1
                score += 10
                if score > high_score:
                    high_score = score
            
            clock.tick(snake_speed)

        # This line ensures the start screen is shown again after game over
        start_screen()

start_screen()
gameLoop()
